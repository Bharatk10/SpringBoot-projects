package com.zettamine.accounts.service;

import java.time.LocalDateTime;
import java.util.Optional;
import java.util.Random;

import org.springframework.boot.context.config.ConfigDataResourceNotFoundException;
import org.springframework.stereotype.Service;

import com.zettamine.accounts.constants.AppConstants;
import com.zettamine.accounts.dto.AccountDto;
import com.zettamine.accounts.dto.CustomerDto;
import com.zettamine.accounts.entity.Account;
import com.zettamine.accounts.entity.Customer;
import com.zettamine.accounts.exception.CustomerAlreadyExistsException;
import com.zettamine.accounts.exception.ResourceNotFoundException;
import com.zettamine.accounts.mapper.Mapper;
import com.zettamine.accounts.repository.AccountRepository;
import com.zettamine.accounts.repository.CustomerRepository;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class AccountServiceImpl implements IAcountService {

	private CustomerRepository customerRepo;

	private AccountRepository accountRepo;

	@Override
	public void createAccount(CustomerDto customerDto) {

		String mobileNumber = customerDto.getMobileNumber();

		Optional<Customer> optCustomer = customerRepo.findByMobileNumber(mobileNumber);

		if (optCustomer.isPresent()) {
			throw new CustomerAlreadyExistsException(
					"The customer Already exists with the given mobile Number " + mobileNumber);
		}

		Customer customer = Mapper.mapCustomerDtoToCustomer(customerDto, new Customer());

		customer.setCreatedAt(LocalDateTime.now());
		customer.setCreatedBy("System");
		System.out.println(customer);
		Customer customerObj = customerRepo.save(customer);

		Account account = new Account();

		Long accountNum = 10000000L + new Random().nextLong(10000000);
		account.setAccountNumber(accountNum);
		account.setCustomerId(customerObj.getCustomerId());
		account.setBrachAddress(AppConstants.ADDRESS);
		account.setAccountType(AppConstants.SAVINGS);
		account.setCreatedAt(LocalDateTime.now());
		account.setCreatedBy("System");

		accountRepo.save(account);

	}

	@Override
	public CustomerDto getCustomerDetailsByMobileNumber(String moblileNumber) {

		Customer customer = customerRepo.findByMobileNumber(moblileNumber)
				.orElseThrow(() -> new ResourceNotFoundException("Customer", "MobileNumber", moblileNumber));

		Account account = accountRepo.findByCustomerId(customer.getCustomerId()).orElseThrow(
				() -> new ResourceNotFoundException("Account", "Account number", customer.getCustomerId().toString()));

		CustomerDto customerDto = Mapper.mapCustomerToCustomerDto(customer, new CustomerDto());

		AccountDto accountDto = Mapper.mapAccountToAccountDto(account, new AccountDto());

		customerDto.setAccountDto(accountDto);
		return customerDto;
	}

	@Override
	public CustomerDto updateCustomerDetails(CustomerDto customerDto) {
		
		return null;
	}

}
