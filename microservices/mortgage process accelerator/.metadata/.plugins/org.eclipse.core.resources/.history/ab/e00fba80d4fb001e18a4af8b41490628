package com.zettamine.mpa.escrow.controller;

import java.util.ArrayList;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.zettamine.mpa.escrow.constants.EscrowConstants;
import com.zettamine.mpa.escrow.constants.EscrowReqLoanProdConstants;
import com.zettamine.mpa.escrow.dto.AddLoanReqDto;
import com.zettamine.mpa.escrow.dto.EscrowReqDto;
import com.zettamine.mpa.escrow.dto.EscrowReqLoanProductDto;
import com.zettamine.mpa.escrow.dto.ResponseDto;
import com.zettamine.mpa.escrow.dto.SearchByReqDto;
import com.zettamine.mpa.escrow.service.EscrowReqLoanProductService;
import com.zettamine.mpa.escrow.utils.StringUtil;
import com.zettamine.mpa.exception.DuplicateLoanProdRequirment;
import com.zettamine.mpa.exception.RequirmentNotPresentException;

import jakarta.validation.Valid;
import lombok.AllArgsConstructor;

@RestController
@RequestMapping(path = "api/v1/escrow/loan-requirment")
@AllArgsConstructor
@Validated
public class EscrowReqLoanProductController {

	private EscrowReqLoanProductService escoReqLoanSer;
	
	@PostMapping("/add-requirment")
	public ResponseEntity<ResponseDto> save(@Valid @RequestBody AddLoanReqDto  reqLoanDto){
		escoReqLoanSer.save(reqLoanDto);
		return ResponseEntity.status(HttpStatus.CREATED)
				.body(new ResponseDto(EscrowConstants.STATUS_201, EscrowReqLoanProdConstants.SAVE_SUCCEESS));
		
	}
	
	@GetMapping("/find-by-prodid/{prodId}")
	public ResponseEntity<List<String>> findByProdId(@PathVariable Integer prodId) {
		List<String> byProdId = escoReqLoanSer.findByProdId(prodId);
		return ResponseEntity.status(HttpStatus.OK).body(byProdId);
	}
	
	@GetMapping("/find-by-requirment")
	public ResponseEntity<List<EscrowReqLoanProductDto>> findByReqIdAndProdId(@RequestParam List<String> reqNameList) {

		List<String> norReqNameList = new ArrayList<>();
		for (String requirment : reqNameList) {
			norReqNameList.add(StringUtil.normalizeString(requirment));
		}
		List<EscrowReqLoanProductDto> byReqName = escoReqLoanSer.findByReqName(norReqNameList);
		return ResponseEntity.status(HttpStatus.OK).body(byReqName);
	}

	@PostMapping("/search-by-requirments")
	public ResponseEntity<List<Integer>> searchByReq(@Valid @RequestBody SearchByReqDto searchDto) {

		List<String> norReqNameList = new ArrayList<>();
		for (String requirment : searchDto.getRequirments()) {
			norReqNameList.add(StringUtil.normalizeString(requirment));
		}
		List<Integer> searchByReq = escoReqLoanSer.searchByReq(norReqNameList);
		return ResponseEntity.status(HttpStatus.OK).body(searchByReq);
	}
	@PutMapping("/delete")
	public ResponseEntity<ResponseDto> deleteLoanReq(@Valid @RequestBody LoanReqDto loanReqDto) {
		escoReqLoanSer.delete(loanReqDto);
		return ResponseEntity.status(HttpStatus.ACCEPTED)
				.body(new ResponseDto(EscrowConstants.STATUS_202, EscrowReqLoanProdConstants.DELETED));
	}
}