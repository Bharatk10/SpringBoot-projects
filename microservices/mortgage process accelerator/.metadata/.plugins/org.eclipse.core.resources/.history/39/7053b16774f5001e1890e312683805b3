package com.zettamine.mpa.lpm.service;

import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import com.zettamine.mpa.lpm.constants.AppConstants;
import com.zettamine.mpa.lpm.entity.PropertyRestriction;
import com.zettamine.mpa.lpm.entity.PropertyRestrictionCategory;
import com.zettamine.mpa.lpm.exception.MismatchFoundException;
import com.zettamine.mpa.lpm.exception.PropertyRestrictionAlreadyExistsException;
import com.zettamine.mpa.lpm.exception.ResourceAlreadyExistsException;
import com.zettamine.mpa.lpm.exception.ResourceNotFoundException;
import com.zettamine.mpa.lpm.mapper.PropertyRestrictionMapper;
import com.zettamine.mpa.lpm.model.PropertyRestrictionDto;
import com.zettamine.mpa.lpm.repository.PropertyRestrictionRepository;
import com.zettamine.mpa.lpm.repository.PropertyRestrictionCategoryRepository;
import com.zettamine.mpa.lpm.util.StringNormalization;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class PropertyRestrictionServiceImpl implements IPropertyRestrictionService {

	private PropertyRestrictionRepository propRestrRepo;
	private PropertyRestrictionCategoryRepository propRestrCatgRepo;

	@Override
	public void createPropertyRestriction(PropertyRestrictionDto dto) {
		PropertyRestrictionDto propertyRestrictionDto = StringNormalization.processPropRestDto(dto);

		PropertyRestrictionCategory propRestCat = propRestrCatgRepo
				.findByCategoryType(propertyRestrictionDto.getCategoryType())
				.orElseThrow(() -> new ResourceNotFoundException(AppConstants.PROP_RSTR, AppConstants.PROP_CATG_TYPE,
						propertyRestrictionDto.getCategoryType().toString()));

		Optional<PropertyRestriction> optRstrType = propRestrRepo
				.findByRestrictionType(propertyRestrictionDto.getRestrictionType());

		if (optRstrType.isPresent()) {
			throw new ResourceAlreadyExistsException(
					String.format(AppConstants.PROP_RSTR_EXISTS_MSG, propertyRestrictionDto.getRestrictionType()));
		} else {
			PropertyRestriction propRstr = PropertyRestrictionMapper
					.propertyRestrictionDtoToPropertyRestriction(new PropertyRestriction(), propertyRestrictionDto);
			propRstr.setRestrictionCategory(propRestCat);
			propRstr.setStatus(AppConstants.ACTIVE);
			propRestrRepo.save(propRstr);
		}
	}

	@Override
	public void updatePropertyRestriction(PropertyRestrictionDto dto, Integer restrictionId) {

		PropertyRestrictionDto propertyRestrictionDto = StringNormalization.processPropRestDto(dto);

		PropertyRestriction propRstr = propRestrRepo.findById(restrictionId)
				.orElseThrow(() -> new ResourceNotFoundException(AppConstants.PROP_RSTR, AppConstants.PROP_RSTR_ID,
						restrictionId.toString()));

		PropertyRestrictionCategory propRestCat = propRestrCatgRepo
				.findByCategoryType(propertyRestrictionDto.getCategoryType())
				.orElseThrow(() -> new ResourceNotFoundException(AppConstants.PROP_RSTR_CATG,
						AppConstants.PROP_CATG_TYPE, propertyRestrictionDto.getCategoryType().toString()));

		if (propertyRestrictionDto.getCategoryType().equalsIgnoreCase(propRestCat.getCategoryType())) {

			if (propertyRestrictionDto.getRestrictionType().equalsIgnoreCase(propRstr.getRestrictionType())) {

				PropertyRestriction proRstrSave = PropertyRestrictionMapper
						.propertyRestrictionDtoToPropertyRestriction(propRstr, propertyRestrictionDto);

				propRestrRepo.save(proRstrSave);
			} else {

				throw new MismatchFoundException(AppConstants.PROP_RSTR_TYPE,
						propertyRestrictionDto.getRestrictionType(), AppConstants.PROP_RSTR);
			}
		} else {

			throw new MismatchFoundException(AppConstants.PROP_CATG_TYPE, propertyRestrictionDto.getCategoryType(),
					AppConstants.PROP_RSTR_CATG);
		}
	}

	@Override
	public List<PropertyRestrictionDto> getAllPropertyRestriction() {
		List<PropertyRestriction> allRestrictions = propRestrRepo.findAll();
		List<PropertyRestrictionDto> list = allRestrictions.stream().map(m -> PropertyRestrictionMapper
				.propertyRestrictioToPropertyRestrictionDto(new PropertyRestrictionDto(), m)).toList();
		return list;
	}

	@Override
	public PropertyRestrictionDto getPropertyRestrictionById(Integer restrictionId) {
		PropertyRestriction propRstr = propRestrRepo.findById(restrictionId)
				.orElseThrow(() -> new ResourceNotFoundException(AppConstants.PROP_RSTR, AppConstants.PROP_RSTR_ID,
						restrictionId.toString()));
		PropertyRestrictionDto restrictionDto = PropertyRestrictionMapper
				.propertyRestrictioToPropertyRestrictionDto(new PropertyRestrictionDto(), propRstr);
		return restrictionDto;
	}

	@Override
	public void deletePropertyRestrictionById(Integer restrictionId) {

		PropertyRestriction propRstr = propRestrRepo.findById(restrictionId)
				.orElseThrow(() -> new ResourceNotFoundException(AppConstants.PROP_RSTR, AppConstants.PROP_RSTR_ID,
						restrictionId.toString()));

		propRstr.setStatus(AppConstants.INACTIVE);
		propRestrRepo.save(propRstr);
	}

}