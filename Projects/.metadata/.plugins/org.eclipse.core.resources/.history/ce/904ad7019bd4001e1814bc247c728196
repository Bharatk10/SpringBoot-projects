package com.zettamine.boot.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.zettamine.boot.constants.AppConstants;
import com.zettamine.boot.constants.ValidationConstants;
import com.zettamine.boot.entity.Material;
import com.zettamine.boot.entity.MaterialInspection;
import com.zettamine.boot.models.MaterialSearchCriteria;
import com.zettamine.boot.service.IMaterialInspService;
import com.zettamine.boot.service.IMaterialService;
import com.zettamine.boot.utility.SessionUtils;
import com.zettamine.boot.utility.StringUtilis;

import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/zettaInsp")
public class MaterialController {

	private IMaterialService materialService;

	private IMaterialInspService matInspService;

	public MaterialController(IMaterialService materialService, IMaterialInspService matInspService) {
		super();
		this.materialService = materialService;
		this.matInspService = matInspService;
	}

	private static final Logger logger = LoggerFactory.getLogger(MaterialController.class);

	@PostMapping("/material")
	public ResponseEntity<?> addMaterialDetails(@Valid @RequestBody(required = false) Material material) {
		logger.debug("*** getAddMaterialDetails() method execution started ***");

		String id = materialService.materialIdGenerator();
		System.out.println(id);
		Material materialObj = materialService.saveMaterialById(material, id);

		if (material == null) {

			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ValidationConstants.MATERIAL_ERROR);
		}

		if (materialObj != null) {
			logger.debug("*** getAddMaterialDetails() method execution started ***");
			return ResponseEntity.status(HttpStatus.OK).body(materialObj);
		} else {

			logger.debug("*** getAddMaterialDetails() method execution completed ***");
			logger.debug("*** displaing the error messgage while adding material");
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ValidationConstants.MATERIAL_SAVE_ERROR);
		}
	}

	@PutMapping("/material")
	public ResponseEntity<?> updateMaterialDetails(@Valid @RequestBody(required = false) Material material) {
		logger.debug("*** updateMaterialDetails() method execution started ***");

		if (material == null) {
			logger.debug("*** updateMaterialDetails() method execution completed ***");
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ValidationConstants.MATERIAL_ERROR);
		}

		if (material.getMaterialId() == null) {
			return ResponseEntity.status(HttpStatus.CONFLICT).body(ValidationConstants.MATER_ID_ERROR);
		}

		String id = material.getMaterialId();

		if (!id.matches(ValidationConstants.MATERIAL_ID_PATTERN)) {

			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ValidationConstants.MATERIAL_ID_ERROR);
		}

		Material matObj = materialService.getMaterialById(id);

		if (matObj == null) {
			return ResponseEntity.status(HttpStatus.GONE).body(ValidationConstants.MAT_ID_ERROR + " " + id);
		}

		Material materialObj = materialService.saveMaterialById(material, material.getMaterialId());

		if (materialObj != null) {
			logger.debug("*** updateMaterialDetails() method execution completed ***");
			return ResponseEntity.status(HttpStatus.OK).body(materialObj);
		} else {

			logger.debug("*** updateMaterialDetails() method execution completed ***");
			logger.debug("*** displaing the error messgage while adding material");
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ValidationConstants.MATERIAL_UPDATE_ERROR);
		}
	}

	@GetMapping("/materials")
	public ResponseEntity<?> getAllMaterials() {
		logger.debug("*** getAllMaterials() method execution started ***");

		List<Material> materialList = materialService.getAllMaterials();

		if (materialList.isEmpty()) {
			logger.debug("*** getAllMaterials() method execution completed ***");
			return ResponseEntity.ok(ValidationConstants.MATERIAL_LIST_MESSAGE);
		}
		logger.debug("*** getAllMaterials() method execution completed ***");
		return ResponseEntity.ok(materialList);

	}

	@GetMapping("/material/{mId}")
	public ResponseEntity<?> getMaterialById(@PathVariable(required = false) String mId) {
		logger.debug("*** getMaterialById() method execution started ***");

		if (mId!=null) {
			mId = StringUtilis.processString(mId);
			if(mId.length()==0) {
				logger.debug("*** getMaterialById() method execution completed ***");
				return ResponseEntity.status(HttpStatus.CONFLICT).body(ValidationConstants.MATER_ID_ERROR);
			}
		}

		

		if (!mId.matches(ValidationConstants.MATERIAL_ID_PATTERN)) {
			logger.debug("*** getMaterialById() method execution completed ***");
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ValidationConstants.MATERIAL_ID_ERROR);
		}

		Material matObj = materialService.getMaterialById(mId);

		if (matObj == null) {
			logger.debug("*** getMaterialById() method execution completed ***");
			return ResponseEntity.status(HttpStatus.GONE).body(ValidationConstants.MAT_ID_ERROR + " " + mId);
		}

		logger.debug("*** getMaterialById() method execution completed ***");
		return ResponseEntity.ok(matObj);

	}

	@GetMapping("/addcharateristics/{mId}")
	public ResponseEntity<?> getAddCharacteristics(@PathVariable("mId") String mId) {
		logger.debug("*** getAddCharacteristics() method execution started ***");

		if (mId!=null) {
			mId = StringUtilis.processString(mId);
			if(mId.length()==0) {
				logger.debug("*** getMaterialById() method execution completed ***");
				return ResponseEntity.status(HttpStatus.CONFLICT).body(ValidationConstants.MATER_ID_ERROR);
			}
		}
		if (!mId.matches(ValidationConstants.MATERIAL_ID_PATTERN)) {
			logger.debug("*** getMaterialById() method execution completed ***");
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ValidationConstants.MATERIAL_ID_ERROR);
		}
		Material matObj = materialService.getMaterialById(mId);

		if (matObj == null) {
			logger.debug("*** getMaterialById() method execution completed ***");
			return ResponseEntity.status(HttpStatus.GONE).body(ValidationConstants.MAT_ID_ERROR + " " + mId);
		}
		MaterialInspection matInsp = new MaterialInspection();
		matInsp.setMaterial(matObj);
		
		MaterialInspection matInspObj = matInspService.saveMaterialInsp(matInsp);
		
		if(matInspObj == null) {
			
			return ResponseEntity.status(HttpStatus.CONFLICT).body(ValidationConstants.MATERIAL_CHARACTERS_SAVE_ERROR);
		}
		
		logger.debug("*** getAddCharacteristics() method execution started ***");
		return null;
	}

	@PostMapping("/submitMatInsp")
	public String getMatInspFormData(MaterialInspection matInsp, Model model, HttpSession session) {
		logger.debug("*** getMatInspFormData() method execution started ***");
		MaterialInspection matInspObj = matInspService.saveMaterialInsp(matInsp);

		String userName = SessionUtils.getLoggedInUsername(session);
		model.addAttribute("userName", userName);

		if (matInspObj == null) {
			model.addAttribute("failmessage", "Material Characteristics added failed");
			logger.debug("*** adding material characteristics failed ***");
			logger.debug("*** getMatInspFormData() method execution started ***");

			return AppConstants.MATERIAL_VIEW;
		}

		String mId = matInspObj.getMaterial().getMaterialId();
		logger.debug("*** getMatInspFormData() method execution started ***");
		return "redirect:/zettaInsp/addMatInsp/" + mId;

	}

	@GetMapping("/addMatInsp/{mId}")
	public String getaddParametersPage(@PathVariable("mId") String mId, HttpSession session, Model model) {
		logger.debug("*** method of PRG for double posting started ***");

		String userName = SessionUtils.getLoggedInUsername(session);
		model.addAttribute("userName", userName);

		model.addAttribute("message", "Material charcaters added Successfully");
		Material material = materialService.getMaterialById(mId);
		MaterialInspection matInsp = new MaterialInspection();
		matInsp.setMaterial(material);
		model.addAttribute("matInsp", matInsp);
		logger.debug("*** method of PRG for double posting completed ***");
		logger.debug("*** the form displays the same for adding new charcateristics ***");
		return AppConstants.ADDMATR_PARAMETERS_VIEW;

	}

	@GetMapping("/viewmaterial/{mId}")
	public String getMaterialData(@PathVariable("mId") String mId, HttpSession session, Model model) {
		logger.debug("*** getMaterialData() method execution started ***");

		String userName = SessionUtils.getLoggedInUsername(session);
		model.addAttribute("userName", userName);
		Material material = materialService.getMaterialById(mId);

		if (material == null) {
			model.addAttribute("failmessage", "the Material id " + mId + " is not in the list");
			logger.debug("*** the material details not available with the particular material id ***");
			logger.debug("*** getMaterialData() method execution completed ***");
			return AppConstants.MATERIAL_VIEW;
		}
		material = materialService.getFiletedMaterial(material);

		model.addAttribute("material", material);
		logger.debug("*** getMaterialData() method execution completed ***");
		return AppConstants.VIEWMATERIAL_VIEW;
	}

	@GetMapping("/searchMaterial")
	public String getMaterialSearchPage(Model model, MaterialSearchCriteria criteria, HttpSession session) {
		logger.debug("*** getMaterialSearchPage() method execution started ***");

		String userName = SessionUtils.getLoggedInUsername(session);
		model.addAttribute("userName", userName);

		model.addAttribute("search", true);
		model.addAttribute("criteria", criteria);
		logger.debug("*** getMaterialSearchPage() method execution completed ***");
		return AppConstants.SEARCHMATERIAL_VIEW;
	}

	@PostMapping("/getmatdetails")
	public String getMaterials(Model model, MaterialSearchCriteria criteria, HttpSession session) {
		logger.debug("*** getMaterials() method execution started ***");

		String userName = SessionUtils.getLoggedInUsername(session);
		model.addAttribute("userName", userName);

		if (!criteria.getMaterialId().isBlank()) {

			Material material = materialService.getMaterialById(criteria.getMaterialId());
			material = materialService.getFiletedMaterial(material);

			model.addAttribute("material", material);
			logger.debug("*** getMaterials() method execution completed ***");
			return AppConstants.VIEWMATERIAL_VIEW;

		}

		List<Material> materialList = materialService.getAllMaterialsBasedonSearchCriteria(criteria);

		model.addAttribute("materialList", materialList);

		if (materialList.size() == 0) {
			model.addAttribute("failmessage", "No materials present for given search criteria");
			logger.debug("*** the fail message ***");
		}
		logger.debug("*** getMaterials() method execution completed ***");
		return AppConstants.MATERIAL_VIEW;

	}

}
