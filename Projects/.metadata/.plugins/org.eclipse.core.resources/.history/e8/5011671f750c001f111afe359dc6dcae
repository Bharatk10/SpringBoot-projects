package com.zettamine.boot.controller;

import java.io.IOException;
import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.zettamine.boot.constants.AppConstants;
import com.zettamine.boot.dto.ResponseDto;
import com.zettamine.boot.dto.RoleDto;
import com.zettamine.boot.dto.UserDto;
import com.zettamine.boot.service.IRoleService;
import com.zettamine.boot.service.IUserService;

import lombok.AllArgsConstructor;

@RestController
@AllArgsConstructor
@RequestMapping("/api/v1/user")
@CrossOrigin("http://localhost:3000")
public class UserController {

	private IUserService userService;
	
	private IRoleService roleService;
	
	@PostMapping("/create")
	public ResponseEntity<?> saveUser(@RequestParam("userDto") String userDtoJson,
            @RequestPart(name = "image", required = false) MultipartFile image) {
		ObjectMapper objectMapper = new ObjectMapper();
	    UserDto userDto;
	    try {
	        userDto = objectMapper.readValue(userDtoJson, UserDto.class);
	    } catch (JsonProcessingException e) {
	        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid userDto JSON");
	    }

	    if (image == null ) {
	        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Empty image file provided");
	    }

	    byte[] imageData;
	    try {
	        if (image != null) {
	            imageData = image.getBytes();
	            System.out.println(imageData);
	            userDto.setImage(imageData);
	        }
	    } catch (IOException e) {
	        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Failed to read image file");
	    }

	    Boolean saved = userService.save(userDto);
	    if (saved == null) {
	        return ResponseEntity.status(HttpStatus.CONFLICT).body("Email is already in use");
	    } else if (!saved) {
	        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("User creation failed. Please check the user data.");
	    }

	    return ResponseEntity.status(HttpStatus.CREATED)
	            .body(new ResponseDto(AppConstants.STATUS_201, AppConstants.MESSAGE_201));
	}

	
	@GetMapping("/fetch-all/roles")
	public ResponseEntity<?> fetchAllRoles(){
		
		List<RoleDto> allRoles = roleService.fetchAllRoles();
		
		return ResponseEntity.status(HttpStatus.OK)
				.body(allRoles);
	}
	@PutMapping("/forgot-password/{email}")
	public ResponseEntity<?> sendMailForTemporaryPassword(@PathVariable ("email") String email){
		Boolean tempPwd = userService.forgotPassword(email);
		if(tempPwd == null) {
			return ResponseEntity 
					.status(HttpStatus.LOCKED)
					.body("Account Locked");
		}else if(tempPwd==false) {
			return ResponseEntity 
					.status(HttpStatus.BAD_REQUEST)
					.body("Email Sent Failed");
		}else {
			return ResponseEntity 
					.status(HttpStatus.OK)
					.body("Email Sent Successfully");
		}
	}
}
